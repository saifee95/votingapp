{
  "name": "plotly",
  "version": "1.0.6",
  "description": "Simple node.js wrapper for the plot.ly API",
  "main": "index.js",
  "devDependencies": {
    "random-signal": "0.0.2",
    "tap": "^0.4.13",
    "tape": "^3.0.3"
  },
  "scripts": {
    "test": "tap test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alexander-daniel/plotly-nodejs.git"
  },
  "keywords": [
    "plotting",
    "graphs",
    "interactive",
    "data",
    "visualization"
  ],
  "author": {
    "name": "Alexander Daniel",
    "email": "alex@lesinstruments.com",
    "url": "http://lesinstruments.com/"
  },
  "license": "MIT",
  "dependencies": {
    "mkdirp": "~0.5.0"
  },
  "readme": "#Plotly Node API\n[![Circle CI](https://circleci.com/gh/plotly/plotly-nodejs/tree/master.svg?style=svg)](https://circleci.com/gh/plotly/plotly-nodejs/tree/master)\n> Analyze and Visualize Data, Together\n\n\nIf you have a question about streaming let us know or open an issue!\n\n`ben@plot.ly` && `alexandre@plot.ly`\n\n## Streaming Plot Examples\n- [mock sensor stream](http://plot.ly/~streaming-demos/6/)\n- [math bar fight](http://plot.ly/~streaming-demos/44/)\n\n##Installation\n```javascript\nnpm install plotly\n```\n\n##Usage\n```javascript\nvar plotly = require('plotly')('username','apiKey');\n\nvar data = [{x:[], y:[], stream:{token:'yourStreamtoken', maxpoints:200}}];\nvar graphOptions = {fileopt : \"extend\", filename : \"nodenodenode\"};\n\nplotly.plot(data,graphOptions,function() {\n  var stream = plotly.stream('yourStreamtoken', function (res) {\n    console.log(res);\n  });\n  someReadableStream.pipe(stream);\n});\n```\n\n####Full REST API Documentation can be found here: [https://plot.ly/api/rest/](https://plot.ly/api/rest/)\n\nSign up for plotly here: [https://plot.ly/](https://plot.ly/) and obtain your API key and Stream Tokens in your plotly settings: [https://plot.ly/settings](https://plot.ly/settings).\n\n#Methods\n##var plotly = require('plotly')(username, apiKey)\n`username` is a string containing your username\n`apiKey` is a string containing your API key\n```javascript\nvar plotly = require('plotly')('username', 'apiKey');\n```\n\n##plotly.plot(data,graphOptions[, callback])\nPlotly graphs are described declaratively with a data JSON Object and a graphOptions JSON Object.\n`data` is an array of Objects and with each object containing data and styling information of separate graph traces. Docs: [https://plot.ly/api/rest](https://plot.ly/api/rest)  \n`graphOptions` is an Object containing styling options like axis information and titles for your graph. Docs: [https://plot.ly/api/rest](https://plot.ly/api/rest)  \n`callback(err,msg)` where `err` is an error Object, and `msg` is the return response Object\n\nThe `msg` object has the following attributes : `msg.url`,`msg.filename`,`msg.message`,`msg.warning`,`msg.error`\n```javascript\n// examples/rest-example.js\n\nvar plotly = require('plotly')('username','apiKey');\n\nvar data = [{x:[0,1,2], y:[3,2,1], type: 'bar'}];\nvar graphOptions = {fileopt : \"extend\", filename : \"nodenodenode\"};\n\nplotly.plot(data, graphOptions, function (err, msg) {\n    console.log(msg);\n});\n```\n##var stream = plotly.stream(token[, callback])\n`token` accepts a token string\n`callback(res)` where `res` is a the response object with the following attributes : `res.msg`, `res.statusCode`\n\n```javascript\n// examples/streaming-example.js\nvar plotly = require('plotly')('username','apiKey');\n\nvar initData = [{x:[], y:[], stream:{token:'token', maxpoints:200}}];\nvar initGraphOptions = {fileopt : \"extend\", filename : \"nodenodenode\"};\n\nplotly.plot(initData, initGraphOptions, function (err, msg) {\n  if (err) return console.log(err)\n  console.log(msg);\n\n  var stream1 = plotly.stream('token', function (err, res) {\n    console.log(err, res);\n    clearInterval(loop); // once stream is closed, stop writing\n  });\n\n  var i = 0;\n  var loop = setInterval(function () {\n      var streamObject = JSON.stringify({ x : i, y : i });\n      stream1.write(streamObject+'\\n');\n      i++;\n  }, 1000);\n});\n```\n\n[Live Streaming Example](https://plot.ly/~Streaming-Demos/6/)\n```javascript\n// examples/signal-stream.js\n\n/* If you have not signed up for Plotly you can do so using https://plot.ly\n * or see the example signup.js. Once you do, populate the config.json in this\n * example folder!\n */\nvar config = require('./config.json')\n  , username = config['user']\n  , apiKey = config['apiKey']\n  , token = config['token']\n  , Plotly = require('../.')(username, apiKey)\n  , Signal = require('random-signal')\n\n\n// build a data object - see https://plot.ly/api/rest/docs for information\nvar data = {\n    'x':[]   // empty arrays since we will be streaming our data to into these arrays\n  , 'y':[]\n  , 'type':'scatter'\n  , 'mode':'lines+markers'\n  , marker: {\n      color: \"rgba(31, 119, 180, 0.96)\"\n  }\n  , line: {\n      color:\"rgba(31, 119, 180, 0.31)\"\n  }\n  , stream: {\n      \"token\": token\n    , \"maxpoints\": 100\n  }\n}\n\n// build your layout and file options\nvar graphOptions = {\n    \"filename\": \"streamSimpleSensor\"\n  , \"fileopt\": \"overwrite\"\n  , \"layout\": {\n      \"title\": \"streaming mock sensor data\"\n  }\n  , \"world_readable\": true\n}\n\n/*\n * Call plotly.plot to set the file up.\n * If you have included a streaming token\n * you should get a \"All Streams Go!\" message\n */\n\nPlotly.plot(data, graphOptions, function (err, resp) {\n    if (err) return console.log(\"ERROR\", err)\n\n    console.log(resp)\n\n    var plotlystream = Plotly.stream(token, function () {})\n    var signalstream = Signal({tdelta: 100}) //\n\n\n    plotlystream.on(\"error\", function (err) {\n        signalstream.destroy()\n    })\n\n    // Okay - stream to our plot!\n    signalstream.pipe(plotlystream)\n})\n```\n\n\n##plotly.getFigure(fileOwner, fileId[, callback])\n`file_owner` accepts a string of the file owner's name\n`fileId` is an integer, representing the graph ID\n`callback(figure)` where `figure` is a the JSON object of the graph figure\n\n```javascript\nvar plotly = require('plotly')('username','apiKey');\n\nplotly.getFigure('fileOwner', 'fileId', function (err, figure) {\n    if (err) console.log(err);\n    console.log(figure);\n});\n```\n\n##plotly.getImage(figure[, options, callback])\n`figure` is a JSON object of the graph figure\n`options.format` | `jpg`, `png`, `pdf`, `eps`, `webp`\n`options.width` | width in `px` (default : 700)\n`options.height` | height in `px` (default : 500)\n\n`callback(err, imageData)`  \n\n`err` is an Error Object\n`imageStream` is a Stream of base-64 encoded imageData\n\n```javascript\nvar plotly = require('plotly')('username','apiKey');\nvar fs = require('fs');\n\nvar trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  type: \"scatter\"\n};\n\nvar figure = { 'data': [trace1] };\n\nvar imgOpts = {\n    format: 'png',\n    width: 1000,\n    height: 500\n};\n\nplotly.getImage(figure, imgOpts, function (error, imageStream) {\n    if (error) return console.log (error);\n\n    var fileStream = fs.createWriteStream('1.png');\n    imageStream.pipe(fileStream);\n});\n```\n\nYou can also use `getFigure()` and `getImage()` together!\n```javascript\nvar plotly = require('../.')('username','apiKey');\n\n// grab the figure from an existing plot\nplotly.getFigure('fileOwner', 'fileId', function (err, figure) {\n\tif (err) return console.log(err);\n\n\tvar imgOpts = {\n\t\tformat: 'png',\n\t\twidth: 1000,\n\t\theight: 500\n\t};\n\n    plotly.getImage(figure, imgOpts, function (error, imageStream) {\n        if (error) return console.log (error);\n\n        var fileStream = fs.createWriteStream('2.png');\n        imageStream.pipe(fileStream);\n    });\n});\n```\n\n##plotly.deletePlot(fid[, callback])\n`fid` is a String, the id of the plot you wish you delete\n`callback` is a function with `err` and `plot` as parameters. `err`, if present, is the error message returned from the request. `plot` is the plot that was deleted.\n\n```javascript\nvar plotly = require('../.')('username','apiKey');\n\nplotly.deletePlot('88', function (err, plot) {\n    if (err) console.log(err)\n    else console.log(plot);\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexander-daniel/plotly-nodejs/issues"
  },
  "_id": "plotly@1.0.6",
  "_from": "plotly@"
}
